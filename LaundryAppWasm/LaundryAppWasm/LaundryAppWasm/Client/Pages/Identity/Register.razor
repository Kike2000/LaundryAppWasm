<!-- RegistrationForm.razor -->
@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<h3>Register</h3>

<EditForm Model="@registrationModel" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Email">Email</label>
        <InputText id="Email" class="form-control" @bind-Value="registrationModel.Email" />
        <ValidationMessage For="() => registrationModel.Email" />
    </div>

    <div class="form-group">
        <label for="Password">Password</label>
        <input type="password" id="Password" class="form-control" @bind="registrationModel.Password" />
        <ValidationMessage For="() => registrationModel.Password" />
    </div>

    <div class="form-group">
        <label for="ConfirmPassword">Confirm Password</label>
        <input type="password" id="ConfirmPassword" class="form-control" @bind="registrationModel.ConfirmPassword" />
        <ValidationMessage For="() => registrationModel.ConfirmPassword" />
    </div>

    <div class="form-group">
        <label for="Role">Role</label>
        <InputText id="Email" class="form-control" @bind-Value="registrationModel.Role" />
        <ValidationMessage For="() => registrationModel.Role" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();

    private async Task RegisterUser()
    {

        var response = await Http.PostAsJsonAsync("api/account/register", registrationModel);

        if (response.IsSuccessStatusCode)
        {
            // Handle successful registration (e.g., navigate to a success page).
        }
        else
        {
            // Handle registration errors (e.g., display error messages).
        }
    }

    private class RegistrationModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "Role is required.")]
        public string Role { get; set; }
    }
}
